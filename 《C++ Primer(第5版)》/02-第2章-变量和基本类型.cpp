

// 02-第2章-变量和基本类型


// __________________________2.1 基本内置类型 __________________________

/*
	C++ 定义了一套包括 算术类型 和 空类型 在内的 基本数据类型。
*/

// 2.1.1 算术类型

// 2.1.2 类型转换
/*
	建议：	避免无法预知和依赖于实现环境的行为

	无法预知的行为源于编译器无须（有时是不能）检测的错误。

	程序也应该尽量避免依赖于实现环境的行为。如果我们把 int 的尺寸看出是一个确定不变的已知值，那么这样的程序就称作不可移植的。
	当程序移植到别的机器上后，依赖于实现环境的程序就可能发生错误。

*/


/*
	提示：	切勿混用带符号类型和无符号类型

	如果表达式里既有带符号类型又有无符号类型，当带符号类型取值为负值时会出现异常结果，
	这是因为带符号数会自动地转换成无符号数。
*/







// 转义序列




// __________________________2.2 变量 __________________________



/*	【WARNING】
	初始化不是赋值，初始化的含义是创建变量时赋予其一个初始值，而赋值的含义是把对象的当前值擦除，而以一个新值来替代。
*/


// 列表初始化 __________________________

// C++ 语言定义了初始化的好几种不同形式，
int a = 0;
int b = {0};	// 列表初始化
int c{0};		// 列表初始化
int d(0);	

/*
	C++11 新标准，用花括号来初始化变量得到了应用。
	当用于内置类型的变量时，这种初始化形式有一个重要特点：如果我们使用列表初始化 且 初始值存在丢失信息的风险，则编译器将报错；

*/

long double ld = 3.1415926536
int a{ld},	b = {ld};		// 错误：转换为执行，因为存在丢失信息的危险。
int c(ld),	d = ld;			// 正确：转换执行，且确实丢失了部分值


// 默认初始化 __________________________

/*	【Tip】
	建议初始化每一个内置类型的变量。虽然并非必须这么做，但如果我们不能确保初 未始化后程序安全，
	那么这么做不失为一种简单可靠的方法。
*/