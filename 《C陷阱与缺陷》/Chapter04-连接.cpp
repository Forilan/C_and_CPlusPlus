
#include "Chapter04.h"



// 第4章 连接

// __________________________ 4.1 什么是连接器 __________________________
/*
	C语言中的一个重要思想就是 分别编译，即若干个源程序可以在不同的时候单独进行编译，然后在恰当的时候整合到一起。
*/


// __________________________ 4.2 声明与定义 __________________________

extern int a;		
/*
	这个语句说明了 a  是一个外部整型变量，但是因为它包含了 extern 关键字，
	这就显式地说明了a的存储空间是在程序的其他地方分配的。
*/


// __________________________ 4.3 命名冲突与 static 修饰符 __________________________

static int b;
/*
	b 的作用域限制在 一个源文件内，对于其他源文件，b是不可见的
*/

static int g(int x)
{
	// 这个函数只可被本源文件内的函数调用。
}


// __________________________ 4.4 形参、实参与返回值 __________________________
/*
	任何C函数都有一个形参列表，列表中的每个参数都是一个变量，该变量在函数调用过程中被初始化。

	任何一个C函数都有返回类型，要么是 void ,要么是函数生成结果的类型。
	如何任何一个 函数在 调用它的 每个文件中，都在第一次被调用之前 进行了声明或定义，那么就不会有任何与返回类型相关的麻烦。

	【换句话说，一个函数在被调用前，必须先进行了声明了或者定义。】
*/


// __________________________ 4.5 检查外部类型 __________________________
/*
	为了引出头文件
*/


// __________________________ 4.6头文件 __________________________
/*
	每个外部对象只在一个地方声明。这个声明的地方一般就在一个头文件中，
	需要用到该外部对象的所以模块都应该包括这个头文件。

	for example:

	file.h=====================================
	extern char filename[];

	需要用到外部对象filename 的每个 C源文件都应该加上这样的一个语句：
	#include "file.h"

	最后选择一个C文件，来实现其定义，比如 file.c文件里。
	file.c=====================================
	#include "file.h"
	char filename[] = "/etc/passwd";

	注意，源文件 file.c 实际上包含 filename 的两个声明，这一点只要把 include 语句展开就可以看出：

	extern char filename[];
	char filename[] = "/etc/passwd";

	只要源文件file.c中 filename 的各个声明是一致的，而且这些声明中最多只有一个是 filename 的定义，这样写就是合法的。
*/
