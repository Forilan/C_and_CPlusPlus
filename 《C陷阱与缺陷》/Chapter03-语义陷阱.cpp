

//#include "Chapter03.h"



// 第3章 语义"陷阱"

// __________________________3.1 指针与数组__________________________
/*
	1.  C语言中只有一维数组，而且数组的大小必须在编译期就 作为一个常数确定下来。
	然而，C语言中数组的元素可以是 任何类型的对象，当然也可以是另外一个数组。

	2. 对于一个数组，我们只能够做两件事：确定该数组的大小，以及获得指向该数组下标为0的元素的指针。


	好像本章后面的 部分 没啥看的了。

*/

// __________________________3.2 非数组的指针__________________________	

/*
	在C语言中，字符串常量代表了一块包括字符串中所有字符以及一个空字符（'\0'）的内存区域的地址。
	因为C语言要求字符串常量以空字符作为结束标志。	
*/	

// 将两个字符串连接成单个字符串r
strcpy();
strcat();


char r[100];
strcpy(r,s);
strcat(r,t);


// __________________________3.3 作为参数的数组声明__________________________	

/*
	在C语言中，我们没有办法可以将一个数组作为函数参数直接传递。【难道是因为参数是复制传递的原因，所以强行禁止传递一个大数组到一个函数里？】
	如果我们用数组名作为参数，那么数组名会立刻被转换为指向该数组第1个元素的指针。
	例如：
*/

char hello[] = "hello";
printf("%s\n",hello);
// 等价于下面这句：
printf("%s\n",&hello[0]);	

// 因此，将数组作为函数参数 毫无意义。所以，C语言中会自动地将作为参数的数组声明转换为相应的指针声明。
int strlen(char s[])
{

}
// 与下面的写法完全相同
int strlen(char *s)
{
	
}