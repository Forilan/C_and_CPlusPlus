
// 条款01： 指针与引用的区别 ______  


/* 	______________________  01 引用 肯定会指向一个对象，必须被初始化 ______________________  */
/*
首先，要认识到在任何情况下都不能使用指向空值的引用。一个引用必须总是指向某些对象。

因为引用肯定会指向一个对象，在C++里，引用应被初始化。
*/


std::string&  rs;				// 错误，引用必须被初始化


std::string s("xfsf");
std::string&  rs = s;			// 正确，rs指向s


// 指针没有这样的限制
string * ps;					// 未初始化的指针，合法但是危险，


/*
 	不存在指向空值的引用的这个事实意味着 使用引用的代码效率比 使用指针的要高。
 	因为在使用引用之前不需要测试它的合法性。
*/
void printDouble(const double& rd)
{
	cout << rd;		// 肯定不为 空
}

void printDouble(const double * pd)
{
	if(pd)			// 检查是否为NULL
	{
		cout << *pd;
	}
}

/* 	______________________ 02    ______________________  */
/*
 	指针与引用的另一个重要的不同是指针可以被重新赋值一指向另一个不同的对象。
 	但是引用则总是指向在初始化时被指定的对象，以后不能改变。
*/

/* 	______________________  03 ______________________  */
/*
 	当你重载某个操作符时，你应该使用引用。比如操作符[].
*/

 vector<int> v(10);			// 建立整型向量(vector),大小为10；
 
 v[5] = 10;					// 这个被赋值的目标对象 就是 操作符[] 返回的值。


/* ______________________ 总结	______________________  */
/*
 	当你知道必须指向一个对象并且不想改变其指向时，或者在重载操作符并为防止不必要的语义误解时，你不应该使用指针。
 	而在除此之外的其他情况下，则应使用指针。
*/
