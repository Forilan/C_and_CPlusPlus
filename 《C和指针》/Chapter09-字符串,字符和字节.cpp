

//#include "Chapter09.h"


// 第9章 字符串，字符和字节
/*
	字符串是一种重要的数据类型，但是C语言并没有显示的字符串数据类型，因为字符串以字符常量的形式出现或存储于字符数组中。
	字符串常量很适用于那些程序不会对它们进行修改的字符串。
	所有其他字符串都必须存储于字符数组 或动态分配的内存中。
*/


// __________________________9.1字符串基础__________________________
/*
	字符串就是一串零个或多个字符，并且以一个位模式为全0的NUL字节结尾。因此，字符串所包含的字符内部不能出现NUL字节。
	NUL字节是字符串的终止符，但它本身并不是字符串的一部分，所以字符串的长度并不包括NUL字节。
*/




// __________________________9.2字符串长度__________________________
/*
	字符串的长度就是它所包含的字符的个数。
*/

// __________________________9.3不受限制的字符串函数__________________________

// 9.3.1 复制字符串	
/*
	用于复制字符串的函数是strcpy,它的原型如下：
*/
char *strcpy(char *dst,char const *src);
/*
	程序员必须保证目标字符数组的空间足以容纳需要复制的字符串。如果字符串比数组长，多余的字符仍被复制，它们将被覆盖原先存储于数组后面的内存空间的值。
	strcpy 无法解决 这个问题，因为它无法判断目标字符数组的长度。
*/

// 9.3.2 连接字符串
/*
	要想把一个字符串添加（连接）到另一个字符串的后面，你可以使用strcat函数。
*/
char *strcat(char *dst,char const *src);


// 9.3.3 函数的返回值
/*
	strcpy 和 strcat 都返回它们第1个参数的一份拷贝，就是一个指向目标字符数组的指针。
	由于它们返回这种类型的值，所以你可以嵌套地调用这些函数，如下面这个例子：
*/
strcat(strcpy(dst,a),b);
// 这种嵌套调用的风格较之下面这种可读性更佳的风格在功能上并无优势。
strcpy(dst,a);
strcat(dst,b);	


// 9.3.4 字符串比较
/*
	库函数 strcmp 用于比较两个字符串，它的原型如下：
*/
int strcmp(char const *s1,char const *s2);


// __________________________9.4长度受限的字符串函数__________________________



// __________________________9.5字符串查找基础__________________________





// __________________________9.8字符操作__________________________



// __________________________9.10 总结_________________________
/*
	字符串就是零个或多个字符的序列，该序列以一个NUL字节结尾。字符串的长度就是它所包含的字符的数目。
*/


