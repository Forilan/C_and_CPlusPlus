

//#include "Chapter03.h"

/*
	标识符：所具有的几个特性
		1-作用域
		2-链接属性
		3-存储类型
*/


// 3.5 作用域
/*
	当变量在程序某个部分被声明时，它只有在程序的一定区域才能被访问。这个区域由标识符的作用域决定。
	标识符的作用域 就是程序中该标识符 可以被使用的区域。

	标识符声明的位置决定它的作用域。
	编译器可以确认4种不同类型的作用域：文件作用域，函数作用域，代码块作用域和原型作用域。

	代码块作用域(block scope)：
	位于一对花括号之间的所有语句称为一个代码块。任何在代码块的开始位置声明的标识符都具有代码块作用域。

	文件作用域(file scope)：
	任何在所有代码块之外声明的标识符都具有 文件作用域，它表示这些标识符从它们声明之处直到它所在的源文件结尾处都是可以访问的。


	原型作用域(prototype scope)：
	只适用于在函数原型中声明的参数名。[形参？]

	函数作用域(function scope)：
	它只适用于语句标签，语句标签用于goto语句。简化为一套规则：一个函数中的所有语句标签必须唯一。我希望你永远不要用到这个知识。
*/


int a;			// file scope 文件作用域。
int b(int c);	// file scope 文件作用域。

int d(int e)	// prototype scope 原型作用域。
{
	int f;
	int g(int h);	// prototype scope 原型作用域。
	if(1)
	{
		int f,g,i;
	}
}


// 3.6 链接属性
/*
	标识符的链接属性决定如何处理在不同文件中出现的标识符。标识符的作用域与它的链接属性有关，但这两个属性并不相同。
	链接属性一共有三种：external(外部),internal(内部),none(无)
	

	没有链接属性的标识符 none：也就是说该标识符的多个声明被当做独立不同的实体。
	属于internal 链接属性的标识符 在同一个源文件内的所有声明中都指向同一个实体，但位于不同源文件的多个声明则分属不同的实体。
	属于external 链接属性 的标识符不论声明多少次，位于几个源文件都表示用一个实体。

	关键字 extern 和 static 用于在声明中，修改标识符的链接属性。

	如果某个声明在正常情况下具有external链接属性，在它前面加上 static 关键字 可以使它的 链接属性变为 internal。
	static 只对缺省 链接属性为 external 的声明才有改变链接属性的效果。
*/


// 3.7 存储类型
/*
	变量的存储类型：是指存储变量值的内存类型。变量的存储类型决定变量何时创建，何时销毁以及它的值将保持多久。
	有三个地方可以用于存储变量：普通内存，运行时堆栈，硬件寄存器。

	变量的缺省存储类型取决于它的声明位置。凡是在任何代码块之外声明的变量总是存储于静态内存中，
	也就是不属于堆栈的内存，这类变量称为静态变量。对于这类变量，你无法为它们指定其他存储类型。
	
	静态变量在程序运行之前被创建，在程序的整个执行期间始终存在。它始终保持原先的值，除非给它赋一个不同的值或者程序结束。

	在代码块内部声明的变量的缺省存储类型是自动的，也就是说它存储于堆栈中，称为 自动变量。
	在程序执行到声明自动变量的代码块时，自动变量才被创建，当程序的执行流离开该代码块时，这些自动变量便自行销毁。
	
	如果这些 代码块 被反复执行，则每次都将被重新创建。
	
*/