

// 模板函数
/*
	如果说模板类定义的是一种数据类型，那么模板函数定义的就是一种函数。既然是函数，那么就有输入数据和输出数据。
	和模板类的概念差不多，模板函数的初衷也是为了在函数操作上抽取共同的特性，屏蔽的是类型的不同和差异。
	我们可以通过下面一个简单的代码说明问题：
*/

int int_compare(int a, int b)
{
	return a > b ? a : b;
}

double double_compare(double a, double b)
{
	return a > b ? a : b;
}

/*
	上面的一段代码是取较大值的一段代码。两个函数之间最大的差别就是输入数据类型和输出数据类型之间的差别，
	那我们有没有一种办法可以屏蔽这种数据类型之间的差别呢？有。那就是函数模板：
*/

template <typename type>
type compare(type a, type b)
{
	return a > b ? a : b;
}


// __________________________ 用汇编的眼光看c++（之模板函数）__________________________


